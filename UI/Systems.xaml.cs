using EFModels.MainDB;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Linq;
using System.Windows;
using System.Windows.Controls;

namespace UI
{
    /// <summary>
    /// Логика взаимодействия для Systems.xaml
    /// </summary>
    public partial class Systems : Window
    {
        private MainDBContext mainDB = new MainDBContext();
        private ObservableCollection<EFModels.MainDB.System> systems;
        public Systems()
        {
            InitializeComponent();

            systems = new ObservableCollection<EFModels.MainDB.System>(mainDB.Systems.Include(s => s.BPs));
            systems.CollectionChanged += SystemsOnCollectionChanged;

            dataGrid.ItemsSource = systems;
            systemsCount.Text = $"Всего систем: {systems.Count}";
        }
        //как раз что-то похожее на event через интерфейс
        private void SystemsOnCollectionChanged(object sender, NotifyCollectionChangedEventArgs args)
        {
            if (args.NewItems != null)
            {
                mainDB.Systems.AddRange(args.NewItems.Cast<EFModels.MainDB.System>().ToArray());
                
            }
            if (args.OldItems != null)
            {
                EFModels.MainDB.System system = args.OldItems.Cast<EFModels.MainDB.System>().First();
                mainDB.Systems.RemoveRange(args.OldItems.Cast<EFModels.MainDB.System>().ToArray());
            }
            systemsCount.Text = $"Всего систем: {systems.Count}";
        }

        private void addButton_Click(object sender, RoutedEventArgs e)
        {
            systems.Add(new EFModels.MainDB.System { Id = systems.Last().Id + 1 });
        }

        private void deleteButton_Click(object sender, RoutedEventArgs e)
        {
            if (dataGrid.SelectedItem != null)
            {
                var selectedSystem = dataGrid.SelectedItem as EFModels.MainDB.System;
                if (selectedSystem.BPs == null || selectedSystem.BPs.Count == 0)
                    systems.Remove(selectedSystem);
                else
                    MessageBox.Show("Нельзя удалить систему у которой есть бизнес-процессы");
            }
        }

        private void updateButton_Click(object sender, RoutedEventArgs e)
        {
            MessageBoxResult result = MessageBox.Show("Вы действительно хотите сохранить изменения?", "Сохранить изменения", MessageBoxButton.YesNo, MessageBoxImage.Question);
            if (result == MessageBoxResult.Yes)
            {

                mainDB.SaveChanges();

            }
        }

        private void dataGrid_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {

        }

        private void dataGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {
            dataGrid.Columns[0].IsReadOnly = true;
            dataGrid.Columns[0].Header = "Номер";
            dataGrid.Columns[1].Header = "Название";
            dataGrid.Columns[2].Visibility = Visibility.Collapsed;
            dataGrid.ColumnWidth = DataGridLength.SizeToHeader;
        }

        private void dataGrid_AutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            e.Column.Width = new DataGridLength(1, DataGridLengthUnitType.Star);
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            MessageBoxResult result = MessageBox.Show("Сохранить изменения?", "Системы", MessageBoxButton.YesNo, MessageBoxImage.Question);
            if (result == MessageBoxResult.Yes)
            {
                mainDB.SaveChanges();
            }
        }

        private void openBP_Click(object sender, RoutedEventArgs e)
        {
            if (dataGrid.SelectedItem != null)
            {
                EFModels.MainDB.System system = dataGrid.SelectedItem as EFModels.MainDB.System;
                new BPs(system.Id).ShowDialog();
            }
        }

        private void cancelButton_Click(object sender, RoutedEventArgs e)
        {
            systems = new ObservableCollection<EFModels.MainDB.System>(mainDB.Systems.Include(s => s.BPs));
            systems.CollectionChanged += SystemsOnCollectionChanged;
            dataGrid.ItemsSource = systems;
            systemsCount.Text = $"Всего систем: {systems.Count}";
        }
    }
}
